/******************************************************
 * This is the main file for the mips1 ArchC model    *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 
// Rodolfo editou aqui
//
const char *project_name="mips1";
const char *project_file="mips1.ac";
const char *archc_version="2.0beta1";
const char *archc_options="-abi -dy ";

#include  <systemc.h>
#include  "mips1.H"
#include  "ac_tlm_mem.h"
#include  "router.h"
#include  "lock.h"
#include  "wake.h"
#include  "offload.h"

#define NUM_OF_PROCESSORS 2

using user::ac_tlm_mem;
using user::router;
using user::lock;
using user::wake;
using user::offload;

int sc_main(int ac, char *av[])
{
  int accp;
  char **avcp;

  //!  ISA simulator
  mips1 mips1_proc1("mips1");
  mips1 mips1_proc2("mips2");

  mips1 **procs = (mips1 **) malloc (NUM_OF_PROCESSORS * sizeof *procs);
  procs[0] = &mips1_proc1;
  procs[1] = &mips1_proc2;  


  ac_tlm_mem mem("mem");
  lock lk("lk", NUM_OF_PROCESSORS, procs);
  router rout("rout");
  wake wk("wk", NUM_OF_PROCESSORS, procs);
  offload off("off");

#ifdef AC_DEBUG
  ac_trace("mips1_proc1.trace");
#endif 
  mips1_proc1.DM_port(rout.target_export1);
  mips1_proc2.DM_port(rout.target_export2);

  rout.DM_port(mem.target_export);
  rout.lock_port(lk.target_export);
  rout.wake_port(wk.target_export);
  rout.offload_port(off.target_export);


  for (int i = 0; i < NUM_OF_PROCESSORS; i++) {
    accp = ac;
    avcp = (char **) malloc (ac * sizeof *avcp );
    for (int j = 0; j < accp; j++) {
      avcp[j] = (char *) malloc((strlen(av[j]) + 1) * sizeof *(avcp[j]));
      strcpy(avcp[j], av[j]);
    }
    procs[i]->init(accp, avcp);
    if (i == 0)
      procs[i]->ac_wait_sig = 1;
    else
      procs[i]->ac_wait_sig = 0;
  }

  cerr << endl;

  sc_start();

  mips1_proc1.PrintStat();
  //mips1_proc2.PrintStat();

  cerr << endl;

#ifdef AC_STATS
  mips1_proc1.ac_sim_stats.time = sc_simulation_time();
  //mips1_proc2.ac_sim_stats.time = sc_simulation_time();
  mips1_proc1.ac_sim_stats.print();
  //mips1_proc2.ac_sim_stats.print();
#endif 

#ifdef AC_DEBUG
  ac_close_trace();
#endif 

  return mips1_proc1.ac_exit_status;
}
